function randDistrBin(distr) {
    var rn = Math.random(); // RN
    var m = 0; // M ..... but indexing from 0 rather than 1
    while (rn > 0) {
        rn = rn - distr[m];
        m += 1;
    }
    return m;
}

function calcAngle (distr, prev_angle) {
    var i = randDistrBin(distr); 
    //clog ("randdistrbin " + i +  " prevangle " + prev_angle);
    var angle = i * 5 + (i - 1) * 5; // minimum angle 5 degrees, increment by 10 ... i.e., 10 * i - 5
    if (angle < 180)
        angle = 180 - angle + prev_angle;  
    else if (angle < 360) {
        angle = 540 - angle + prev_angle;      
    } else {
        $("#message").text("Error: angle is out of bounds."); 
                    //.fadeOut(1000); //.fadeIn(400); 
        return;
    }  
    if (angle > 360)
        angle -= 360;   
    return angle;
}

// ============================================================
// -------- calc distance to move ----------------------------------------
function calcDist (dist_distr, dist_multiple) {
    var i = randDistrBin(dist_distr); 
    if (dist_multiple == 50) { 
        dist = i * 50 + (i-1) * 50;
    } else if (dist_multiple == 25) {
        dist = i * 25 + (i-1) * 25;            
    } else {
        $("#message").text("Error: invalid distance multiplier."); //.fadeOut(1000); //.fadeIn(400); 
        return;
    }
    dist = dist / 5280.0; // convert from feet to miles
    return dist;
}


var params = {
    // these distributions taken from dissertation of DB Siniff, 1967, Table 10, p. 106
    distr: {
        "default": {
            name: "default",
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            ang: [0.02778,0.02778,0.02778,0.02778, 0.02778, 0.02778, 0.02778,
                0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02778,
                            0.02777,
                            0.02777,
                            0.02777,
                            0.02777,
                            0.02777,
                            0.02777,
                            0.02777,
                            0.02777],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194]
                },
        "uniform": { 
            name:"uniform",
            move: [.063,.063,.063,.063,.063,.063,.063,.063,.063,.063,
                    .063,.063,.063,.063,.063,.063],
            rest: [.1,.1,.1,.1,.1,.1,.1,.1,.1,.1],
            ang: [0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,
                    0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,
                    0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,0.02778,
                    0.02778,0.02778,0.02778,0.02778,0.02778, 0.02778] ,
            dist: [.067,.067,.067,.067,.067,.067,.067,.067,.067,.067,
                    .067,.067,.067,.067,.067]
                    },
        "unimodal (mu=pi, kappa=0)": {
            name:"unimodal (mu=pi, kappa=0)",
            ang:[0.028722 ,  0.028547 ,  0.028723 ,  0.028807 ,  0.028677 ,  0.028459 ,  0.02879 ,  0.028626 ,  0.028614 ,  0.028676 ,  0.028885 ,  0.02859 ,  0.028375 ,  0.028549 ,  0.028263 ,  0.028422 ,  0.028546 ,  0.028374 ,  0.028789 ,  0.028504 ,  0.02851 ,  0.028531 ,  0.028839 ,  0.028134 ,  0.028526 ,  0.028662 ,  0.028369 ,  0.028661 ,  0.028643 ,  0.028361 ,  0.0286 ,  0.028459 ,  0.028738 ,  0.02867 ,  0.028324 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },
        "unimodal (mu=pi, kappa=1)": {
                name:"unimodal (mu=pi, kappa=1)",
            ang:[0.008136 , 0.008362 , 0.008941 , 0.009639 , 0.010904 , 0.012405 , 0.014275 , 0.016975 , 0.020187 , 0.023791 , 0.028405 , 0.033488 , 0.039263 , 0.044408 , 0.050055 , 0.054194 , 0.057921 , 0.059166 , 0.059168 , 0.057752 , 0.053582 , 0.050032 , 0.044603 , 0.039128 , 0.033746 , 0.02794 , 0.023717 , 0.020351 , 0.016806 , 0.014658 , 0.012327 , 0.010749 , 0.009612 , 0.008864 , 0.008359 , 0.008091 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },
        "unimodal (mu=pi, kappa=5)": {
            name:"unimodal (mu=pi, kappa=5)",
            ang:[0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0.000158 ,  0.000366 ,  0.000863 ,  0.002126 ,  0.005104 ,  0.011617 ,  0.024022 ,  0.046024 ,  0.076892 ,  0.112808 ,  0.143018 ,  0.15377 ,  0.143135 ,  0.113213 ,  0.076998 ,  0.045713 ,  0.024025 ,  0.011414 ,  0.005075 ,  0.00205 ,  0.000814 ,  0.000348 ,  0.000149 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },
        "unimodal (mu=pi, kappa=10)": {
            name:"unimodal (mu=pi, kappa=10)",
            ang:[0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0.000244 ,  0.001226 ,  0.005518 ,  0.019922 ,  0.055624 ,  0.118802 ,  0.188524 ,  0.220442 ,  0.188745 ,  0.118375 ,  0.05564 ,  0.019769 ,  0.005519 ,  0.001282 ,  0.00025 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },
            "unimodal (mu=0, kappa=1)": {
            name:"unimodal (mu=0, kappa=1)",
            ang:[               0.059432 , 0.057403 , 0.054217 , 0.049934 , 0.044316 , 0.038931 , 0.033507 , 0.028156 , 0.023681 , 0.020183 , 0.017169 , 0.014606 , 0.01238 , 0.010864 , 0.00956 , 0.009035 , 0.008351 , 0.008277 , 0.008138 , 0.00839 , 0.008944 , 0.00982 , 0.011004 , 0.012504 , 0.014459 , 0.016906 , 0.020052 , 0.023986 , 0.028556 , 0.033492 , 0.03879 , 0.044337 , 0.049859 , 0.054061 , 0.057636 , 0.059064  ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },
            "unimodal (mu=0, kappa=5)": {
            name:"unimodal (mu=0, kappa=5)",
            ang:[0.147205 , 0.127306 , 0.094554 , 0.061055 , 0.035908 , 0.018317 , 0.008761 , 0.003905 , 0.001587 , 0.00064 , 0.000309 , 0.000154 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000107 , 0.000272 , 0.000721 , 0.001684 , 0.003762 , 0.008631 , 0.018223 , 0.035537 , 0.061882 , 0.094762 , 0.126974 , 0.147475 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },
            "unimodal (mu=0, kappa=10)": {
            name:"unimodal (mu=0, kappa=10)",
            ang:[0.206808 , 0.153382 , 0.085364 , 0.036636 , 0.012095 , 0.003295 , 0.000743 , 0.000132 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000144 , 0.000777 , 0.00325 , 0.012152 , 0.036887 , 0.086315 , 0.154428 , 0.207523  ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },

        "bimodal (mu=pi, kappa=1)": {
            name:"bimodal (mu=pi, kappa=1)",
            ang:[0.008414 , 0.009234 , 0.011614 , 0.015401 , 0.021981 , 0.031019 , 0.042052 , 0.05186 , 0.058479 , 0.058117 , 0.052078 , 0.041977 , 0.031316 , 0.022074 , 0.015833 , 0.011651 , 0.009176 , 0.008075 , 0.008469 , 0.00926 , 0.011491 , 0.015742 , 0.022023 , 0.030995 , 0.04206 , 0.051857 , 0.058412 , 0.058523 , 0.052023 , 0.041339 , 0.030614 , 0.021983 , 0.015614 , 0.011757 , 0.009235 , 0.008252 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },
        "bimodal (mu=pi, kappa=5)": {
            name:"bimodal (mu=pi, kappa=5)",
            ang:[0 ,  0 ,  0 ,  0.000273 ,  0.001495 ,  0.008197 ,  0.035107 ,  0.095029 ,  0.148976 ,  0.127731 ,  0.061567 ,  0.017823 ,  0.003608 ,  0.00057 ,  0.000127 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0.000116 ,  0.000587 ,  0.003536 ,  0.017874 ,  0.061088 ,  0.127697 ,  0.148505 ,  0.095191 ,  0.034851 ,  0.008136 ,  0.001439 ,  0.00026 ,  0 ,  0 ,  0 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            },
        "bimodal (mu=pi, kappa=10)": {
            name:"bimodal (mu=pi, kappa=10)",
            ang:[0 ,  0 ,  0 ,  0 ,  0 ,  0.000734 ,  0.012663 ,  0.087409 ,  0.204501 ,  0.15287 ,  0.03756 ,  0.003402 ,  0.000135 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0.000142 ,  0.003519 ,  0.037668 ,  0.153768 ,  0.204631 ,  0.08756 ,  0.012587 ,  0.000788 ,  0 ,  0 ,  0 ,  0 ,  0 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            } ,
         "bimodal (mu=0, kappa=1)": {
            name:"bimodal (mu=0, kappa=1)",
            ang:[0.058343 , 0.052072 , 0.041576 , 0.030999 , 0.022118 , 0.015681 , 0.011678 , 0.009302 , 0.0083 , 0.008307 , 0.009126 , 0.011493 , 0.015835 , 0.02216 , 0.030921 , 0.041643 , 0.052068 , 0.058633 , 0.058501 , 0.051801 , 0.041711 , 0.031072 , 0.021861 , 0.015621 , 0.01172 , 0.009137 , 0.008227 , 0.008125 , 0.009351 , 0.011663 , 0.015515 , 0.022046 , 0.030775 , 0.041725 , 0.052009 , 0.058885 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            } ,
         "bimodal (mu=0, kappa=5)": {
            name:"bimodal (mu=0, kappa=5)",
            ang:[0.136703 , 0.07808 , 0.026583 , 0.006104 , 0.001106 , 0.00021 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000224 , 0.001151 , 0.006254 , 0.026898 , 0.077933 , 0.137084 , 0.137551 , 0.078167 , 0.026883 , 0.006262 , 0.001136 , 0.000218 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000222 , 0.001171 , 0.006213 , 0.026955 , 0.078642 , 0.137979 ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            } ,
         "bimodal (mu=0, kappa=10)": {
            name:"bimodal (mu=0, kappa=10)",
            ang:[0.180549 , 0.061318 , 0.007688 , 0.000461 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000436 , 0.007797 , 0.061333 , 0.180459 , 0.180378 , 0.061268 , 0.007842 , 0.000462 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.000426 , 0.007687 , 0.06133 , 0.180506  ],
            dist: [.0091,.0341,.0703,.1055,.1286,.1350,.1266,.1086,.0865,.0648,.0462,.0315,.0207,.0130,.0194],
            rest: [.1353,.2707,.2707,.1804,.0902,.0361,.0120,.0034,.0009,.0003],
            move: [.0067,.0337,.0842,.1404,.1755,.1755,.1462,.1044,.0633,.0363,.0181,.0082,.0034,.0031,.0005,.0003]
            }    
    },
    begin_with_move: true,
    time_between_positions:1,
    positions_to_run:500,
    dist_multiple: 25,
    x_start:0,
    y_start:0,
    line_style:"linecross", // valid values: "line," "cross", "linecross",
    map_scale:.076, // valid: 0.076, 0.25, .50, 1.0
    plot: null,
    cross_size:5,
    map_inches:9,
    show_origin: false,
    coords: null,
    plotsize:"600x600",
    show_scale: true,
    plotting_delay: 1,
    distr_type:"default",
    foreground:"#000000",
    background:"#eeffee"
};

function runSimulation(params) {
    var dist = 0; // R ... distance to move
    var angle = 0; // AN ... current angle of turn
    var mins_remaining = 0; // MIN 
    var position = 0; // K ... but indexed from 0   
    var coords = {x:[], y:[]} // XA, YA ... x and y coordinates, in miles
    var move_period=params.begin_with_move;
    var rest_positions = 0;
    var cumulative_dist = 0;
    
    // clear coordinates and set initial position
    coords.x.length = 0;
    coords.y.length = 0;
    coords.x[0] = params.x_start;
    coords.y[0] = params.y_start;    
    position += 1;    

    while (position < params.positions_to_run) {
        if (move_period) { // move period
            mins_remaining = randDistrBin(params.distr[params.distr_type].move) * 30 + 15; // minimum move period 45 minutes, increment by 30 minutes
            while ((mins_remaining > 0) && (position < params.positions_to_run)) {
                // calc angle and distance to move
                angle = calcAngle(params.distr[params.distr_type].ang, 
                        angle); // calculate new angle of move (in degrees)
                dist = calcDist(params.distr[params.distr_type].dist, 
                        params.dist_multiple); // calculate distance of move (in miles)
        cumulative_dist += dist;
                // calculate new coordinates (in miles)
                coords.x[position] = coords.x[position - 1] + dist 
                            * Math.cos(angle / (180/Math.PI)); // convert angle to radians
                coords.y[position] = coords.y[position - 1] + dist 
                            * Math.sin(angle / (180/Math.PI));
                //clog("coords x " + coords.x[position] + "   y " + coords.y[position] + "  dist " + dist + "  angle " + angle);
                position++;
                mins_remaining = mins_remaining - params.time_between_positions;      
            }
            move_period = false;
        } else { // rest period
            mins_remaining = randDistrBin(params.distr[params.distr_type].rest) * 30 + 15;
            while ((mins_remaining > 0) && (position < params.positions_to_run)) {
                coords.x[position] = coords.x[position - 1];
                coords.y[position] = coords.y[position - 1];
                //clog("coords x y " + coords.x[position] + " " + coords.y[position]);
                position++; 
                rest_positions++; 
                mins_remaining = mins_remaining - params.time_between_positions;      
            }
            move_period = true;
        }
    }

    return coords;
}
